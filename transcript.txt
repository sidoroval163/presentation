*click  - нажатие на стрелочку вниз
**click next - нажатие на стрелочку вправо


1st slide
Good day dear listeners.
My name is Alex Sidorov and i am glad to show you my presentation on the topic : Promise API, Async/Await

2nd slide
Presentaton contain  five little chapters unleashing presentation theme
lets looking on them.
(Click)
Promise in js - what is it?
(Click)
Promise API and his five friends
(Click)
Mystification is not about Promisification
(Click)
little BIG Microtasks
(Click)
You already can't wait? Its time for async/await
(Click next)

3rd slide

All right, lets go with the first part of our little adventure in JS world.
 So... Promise In Js What Is It?
 (Click)

You can see constructor syntax for a promise object on this slide :
(показываем)
The function passed to new Promise is called the executor. 

(click)

So the executor eventually moves promise to one of these states:
state — initially "pending", then changes to either "fulfilled" when resolve is called or "rejected" when reject is called.
result — initially undefined, then changes to value when resolve(value) called or error when reject(error) is called.

(click)

Consuming functions can be registered (subscribed) using methods: .then, .catch and .finally.
(click)
then
The most important, fundamental one is .then.
you can see .then syntax on this slide
The first argument of .then is a function that runs when the promise is resolved, and receives the result.

The second argument of .then is a function that runs when the promise is rejected, and receives the error.

(click)


catch
If we’re interested only in errors, then we can use null as the first argument: 
.then(null, errorHandlingFunction). Or we can use .catch(errorHandlingFunction), 
which is exactly the same:
The call .catch(f) is a complete analog of .then(null, f), it’s just a shorthand.

(click)
finally finally

The call .finally(f) is similar to .then(f, f) in the sense that function always runs when the promise is settled: be it resolve or reject.

finally is a good handler for performing cleanup, stopping our loading indicators, as they are not needed anymore, no matter what the outcome is.

It’s not exactly an alias of then(f,f) though. There are several important differences:


1.A finally handler has no arguments. In finally we don’t know whether the promise is successful or not. 
That’s all right, as our task is usually to perform “general” finalizing procedures.

2.A finally handler passes through results and errors to the next handler.

Thats all what i want to show you about Promises In Js.

(click next)
There are 5 static methods in the Promise class. We’ll quickly cover their use cases here.
(click)

Promise.all
Let’s say we want many promises to execute in parallel and wait until all of them are ready.

For instance, download several URLs in parallel and process the content once they are all done.

That’s what Promise.all is for.

The syntax is on the fist line of code.



Promise.all takes an array of promises ( and returns a new promise.

The new promise resolves when all listed promises are settled, and the array of their results becomes its result.

For instance, the Promise.all below settles after 3 seconds, and then its result is an array [1, 2, 3]:

Please note that the order of the resulting array members is the same as in its source promises. 
Even though the first promise takes the longest time to resolve, it’s still first in the array of results.


(click)
Promise.allSettled

Promise.allSettled just waits for all promises to settle, regardless of the result. The resulting array has:

{status:"fulfilled", value:result} for successful responses,
{status:"rejected", reason:error} for errors.
For example, we’d like to fetch the information about multiple users. Even if one request fails, we’re still interested in the others.

The example uses Promise.allSettled you can see on this slide:


The results in the line (*) above will be:
(pause)
So for each promise we get its status and value or error.

(click)
Promise.race
Similar to Promise.all, but waits only for the first settled promise and gets its result (or error).

The Promise.race syntax on the fist line of code:

The first promise here was fastest, so it became the result. 
After the first settled promise “wins the race”, all further results/errors are ignored.

(click)
Promise.resolve
Promise.resolve creates a resolved promise with the result value.

just look at the 1 st lane again:

The method is used for compatibility, when a function is expected to return a promise.

For example, the loadCached function below fetches a URL and remembers (caches) its content. 
For future calls with the same URL it immediately gets the previous content from cache, 
but uses Promise.resolve to make a promise of it, so the returned value is always a promise:

We can write loadCached(url).then(…), because the function is guaranteed to return a promise. 
We can always use .then after loadCached. That’s the purpose of Promise.resolve in the line (*).

(click)
Promise.reject
Promise.reject(error) creates a rejected promise with error.

In practice, this method is almost never used.

(click next)

We are at the center of our adventure
Lets talk about promisification

(click)

“Promisification” is a long word for a simple transformation. 
It’s the conversion of a function that accepts a callback into a function that returns a promise.
Such transformations are often required in real-life, 
as many functions and libraries are callback-based. 
But promises are more convenient, so it makes sense to promisify them.

For instance, we have loadScript function (src, callback)
 
(click)

Let’s promisify it. The new loadScriptPromise(src) function achieves the same result, 
but it accepts only src (no callback) and returns a promise.

(pause)

Now loadScriptPromise fits well in promise-based code.
As we can see, it delegates all the work to the original loadScript, 
providing its own callback that translates to promise resolve/reject.
 
 (click next)
 
 Now i tell about microtasks which do a great job.
 
 (click)
 Promise handlers .then/.catch/.finally are always asynchronous.

Even when a Promise is immediately resolved, the code on the lines below .then/.catch/.finally will still execute before these handlers.

Here’s a demo:
(pause)

If you run it, you see code finished first, and then promise done!.

That’s strange, because the promise is definitely done from the beginning.

Why did the .then trigger afterwards? What’s going on?

(click)
Microtasks queue
Asynchronous tasks need proper management. For that, the ECMA standard specifies an internal queue PromiseJobs, more often referred to as the 
“microtask queue” (ES eight term).

As stated in the specification:

The queue is first-in-first-out: tasks enqueued first are run first.
Execution of a task is initiated only when nothing else is running.
Or, to say more simply, when a promise is ready, its .then/catch/finally handlers are put into the queue; they are not executed yet. 
When the JavaScript engine becomes free from the current code, it takes a task from the queue and executes it.

That’s why “code finished” in the example above shows first.

(click)

What if the order matters for us? How can we make code finished run after promise done?

Easy, just put it into the queue with .then:
(pause)
Now the order is as intended.
In most Javascript engines, including browsers and Node.js, the concept of microtasks is closely tied with the “event loop” and “macrotasks”. 
thats all today about microtascs
(click next)

Async/await
There’s a special syntax to work with promises in a more comfortable fashion, called “async/await”. It’s surprisingly easy to understand and use.

(click)
Async functions
Let’s start with the async keyword. It can be placed before a function, like this:
(pause)
The word “async” before a function means one simple thing: a function always returns a promise. 
Other values are wrapped in a resolved promise automatically.

(click)
For instance, this function returns a resolved promise with the result of 1; let’s test it:

(click)
…We could explicitly return a promise, which would be the same:
(pause)
So, async ensures that the function returns a promise, and wraps non-promises in it.
 Simple enough, right? But not only that.
 There’s another keyword, await, that works only inside async functions, and it’s pretty cool.
 
 (click)
 Await
The syntax:
(pause)

The keyword await makes JavaScript wait until that promise settles and returns its result.

(click)

Here’s an example with a promise that resolves in 1 second:
(pause)
The function execution “pauses” at the line (*) and resumes when the promise settles, with result becoming its result. 
So the code above shows “done!” in one second.

Let’s emphasize: await literally makes JavaScript wait until the promise settles, 
and then go on with the result. That doesn’t cost any CPU resources, 
because the engine can do other jobs in the meantime: execute other scripts, handle events, etc.

It’s just a more elegant syntax of getting the promise result than promise.then, easier to read and write.

(click)

If we try to use await in non-async function, there would be a syntax error:

We will get this error if we do not put async before a function. As said, await only works inside an async function.

(click)
Error handling
If a promise resolves normally, then await promise returns the result. 
But in the case of a rejection, it throws the error, just as if there were a throw statement at that line.
(просто читаем текст слайда)

(click)
In real situations, the promise may take some time before it rejects. In that case there will be a delay before await throws an error.

We can catch that error using try..catch, the same way as a regular throw:

(click)

In the case of an error, the control jumps to the catch block. We can also wrap multiple lines:

(click)
If we don’t have try..catch, then the promise generated by the call of the async function f() becomes rejected. 
We can append .catch to handle it:

(click)
The async keyword before a function has two effects:

Makes it always return a promise.
Allows await to be used in it.
The await keyword before a promise makes JavaScript wait until that promise settles, and then:

If it’s an error, the exception is generated — same as if throw error were called at that very place.
Otherwise, it returns the result.
Together they provide a great framework to write asynchronous code that is easy to both read and write.

With async/await we rarely need to write promise.then/catch, 
but we still shouldn’t forget that they are based on promises, 
because sometimes (e.g. in the outermost scope) we have to use these methods. 
Also Promise.all is nice when we are waiting for many tasks simultaneously.


(click next)

Thanks for watching ,  and have a nice day.
Goodbye
(занавес))))
